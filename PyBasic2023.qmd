---
title: "Python basics for summer school-2023, UEF"
subtitle: Linking python to basic data science"
format: 
    revealjs:
        height: 900
        width: 1350
        slide-number: true
        preview-links: auto
        chalkboard:
          buttons: true
        logo: "UEF musta logo engl pysty.jpg"
        theme: simple
        menu:
          width: wide
engine: jupyter
jupyter: python3
keep-ipynb: true
---

## Table of Contents

In this course, we will show you basic syntax of python and some usefull packages regard to data science.

::: columns
::: {.column width="50%"}
- What is python
- Basic Python syntax
  - Variables
  - Basic arithmetic operations
- Control Flow Statements
  - Conditional statements 
  - Loops

![](python-logo.png)

:::

::: {.column width="50%"}
- Basic data structure
  - List
  - Dictionaries
- Function
  - define and call function
- Usefull modules
  - Numpy
  - Pandas
  - Scipy
  - Geopandas
:::
:::

## What is Python? 

- High-level, interpreted programming language.
- Known for its simplicity and readability.
- Used for web development, data analysis, artificial intelligence, and more.

::: panel-tabset
### Ranking1 

![](Ranking1.png){.absolute height="400"}

### Ranking2

![](Ranking2.png){.absolute height="400"}
:::

::: footer
Learn more: [TIOBE](https://www.tiobe.com/tiobe-index/)
:::


## What is Python?
### Python is a user-frendly language

For exammple, output *Hello, World!* in C# and Python.

::: {.fragment .fade-in} 
Strong community support and a vast number of libraries (**137,000**)
:::


::: panel-tabset
### C\#

```c#
namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}
```

### Python

```python
print("Hello, World!")
```
:::
::: {.fragment .fade-in}
There is a joke:  **Life is short, you need Python.**
:::

## Basic Python syntax {auto-animate="true"}

One biggest difference of syntax between Python and other languages is that:

- **Python uses *indentation* rather than'{}' to control functions or loops or conditioanl statement.**

🙅‍♂️

```python
if 5 > 2 {
  print("Five is greater than two!")
}
```

## Basic Python syntax {auto-animate="true"}

One biggest difference of syntax between Python and other languages is that:

- **Python uses *indentation* rather than'{}' to control functions or loops or conditioanl statement.**

🙆‍♂️

```python
if 5 > 2:
  print("Five is greater than two!")
```

## Basic Python syntax

One biggest difference of syntax between Python and other languages is that:

- **Python uses *indentation* rather than '{}' to control functions or loops or conditioanl statement.**

```{.python code-line-numbers="1,3"}
if 5 > 2 {
  print("Five is greater than two!")
}
```
</br>
```{.python code-line-numbers="2"}
if 5 > 2:
  print("Five is greater than two!")
```

</br>

How about we remove the *indentation* of above code:

</br>

::: {.fragment .fade-in}

```{python}
#| error: true
#| echo: true

if 5 > 2:
print("Five is greater than two!")
```
:::

## Basic Python syntax {.smaller}
### Variables


In Python, there are several built-in data types for variables. Here is a table listing some of the common variable types in Python:

</br>

| Variable Type  | Description                                 | Example                      |
|----------------|---------------------------------------------|------------------------------|
| int            | Integer numbers without decimal points     | x = 1                        |
| float          | Floating-point numbers with decimal points | y = 3.1415926                     |
| str            | Strings (sequences of characters)          | name = "Teemo"                |
| bool           | Boolean values (True or False)             | flag = True            |
| list           | Ordered, mutable collection of elements    | numbers = [1, 2, 3]          |
| tuple          | Ordered, immutable collection of elements  | coordinates = (10, 20)       |
| set            | Unordered, mutable collection of unique elements | unique_numbers = {1, 2, 3} |
| dict           | Collection of key-value pairs              | person = {'name': 'Alice', 'age': 30} |
| NoneType       | Represents the absence of a value          | no_value = None              |



## Basic Python syntax {.smaller}
### Variables

- left is variable name, right is value.

```{python}
#| echo: true

a = 1
b = 3.1
c = "Teemo"

# or you can assign variables just like follow:

a,b,c = 1,3.1,"Teemo"
print(a)
print(b)
print(c)
```

- Always give a value when you start to create a variable

```{python}
#| error: true
#| echo: true

d
print(d)
```

```{python}
str(1)+'1'
```

## Basic Python syntax {.smaller}
### Variables

- It is possible for converting data of one type to another.
    - Implicit Conversion - automatic type conversion
    - Explicit Conversion - manual type conversion
    
For example:

```{python}
#| error: true
#| echo: true


# Implicit Conversion
a = 1
print(f"a is {type(a)}")

b = 1.0
print(f"b is {type(b)}")

c = a+b
print(f"c is {type(c)}")
```
## Basic Python syntax {.smaller}
### Variables

- It is possible for converting data of one type to another.
    - Implicit Conversion - automatic type conversion
    - Explicit Conversion - manual type conversion
    
For example:

```{python}
#| error: true
#| echo: true

# Explicit Conversion
a = 1
print(f"a is {type(a)}")

b = "python"
print(f"b is {type(b)}")

c = a+b
print(f"c is {type(c)}")
```
   
```{python}
#| error: true
#| echo: true

c = str(a) + b 
print(f"{c} is {type(c)}")
```











