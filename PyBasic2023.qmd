---
title: "Python basics for summer school-2023, UEF"
subtitle: Linking python to basic data science"
author:
    name: "Liang Chen"
    affiliations:
        name: University of Eastern Finland
        cicy: Joensuu
        
    email: liangch@uef.fi
    orcid: 0000-0002-1811-5717
date: "2023-08-08"
format: 
    revealjs:
        height: 900
        width: 1350
        slide-number: true
        preview-links: auto
        chalkboard:
          buttons: true
        logo: "UEF musta logo engl pysty.jpg"
        theme: simple
        menu:
          width: wide
          
title-slide-attributes:
    data-background-image: "TittleLogo.png"
    data-background-size: 50%
    data-background-position: 5% 5%
    
engine: jupyter
jupyter: python3
keep-ipynb: true
---

## Table of Contents

In this course, we will show you basic syntax of python and some usefull packages regard to data science.

::: columns
::: {.column width="50%"}
- What is python
- Basic Python syntax
  - Variables
  - Basic arithmetic operations
- Control Flow Statements
  - Conditional statements 
  - Loops

![](python-logo.png)

:::

::: {.column width="50%"}
- Function
  - define and call function
- Usefull modules
  - Numpy
  - Pandas
  - Scipy
  - Geopandas
:::
:::

## What is Python? 

- High-level, interpreted programming language.
- Known for its simplicity and readability.
- Used for web development, data analysis, artificial intelligence, and more.

::: panel-tabset
### Ranking1 

![](Ranking1.png){.absolute height="400"}

### Ranking2

![](Ranking2.png){.absolute height="400"}
:::

::: footer
Learn more: [TIOBE](https://www.tiobe.com/tiobe-index/)
:::


## What is Python?
### Python is a user-frendly language

For exammple, output *Hello, World!* in C# and Python.

::: {.fragment .fade-in} 
Strong community support and a vast number of libraries (**137,000**)
:::


::: panel-tabset
### C\#

```c#
namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}
```

### Python

```python
print("Hello, World!")
```
:::
::: {.fragment .fade-in}
There is a joke:  **Life is short, you need Python.**
:::

## Basic Python syntax {auto-animate="true"}

One biggest difference of syntax between Python and other languages is that:

- **Python uses *indentation* rather than'{}' to control functions or loops or conditioanl statement.**

🙅‍♂️

```python
if 5 > 2 {
  print("Five is greater than two!")
}
```

## Basic Python syntax {auto-animate="true"}

One biggest difference of syntax between Python and other languages is that:

- **Python uses *indentation* rather than'{}' to control functions or loops or conditioanl statement.**

🙆‍♂️

```python
if 5 > 2:
  print("Five is greater than two!")
```

## Basic Python syntax

One biggest difference of syntax between Python and other languages is that:

- **Python uses *indentation* rather than '{}' to control functions or loops or conditioanl statement.**

```{.python code-line-numbers="1,3"}
if 5 > 2 {
  print("Five is greater than two!")
}
```
</br>
```{.python code-line-numbers="2"}
if 5 > 2:
  print("Five is greater than two!")
```

</br>

How about we remove the *indentation* of above code:

</br>

::: {.fragment .fade-in}

```{python}
#| error: true
#| echo: true

if 5 > 2:
print("Five is greater than two!")
```
:::

## Basic Python syntax {.smaller}
### Variables


In Python, there are several built-in data types for variables. Here is a table listing some of the common variable types in Python:

</br>

| Variable Type  | Description                                 | Example                      |
|----------------|---------------------------------------------|------------------------------|
| int            | Integer numbers without decimal points     | x = 1                        |
| float          | Floating-point numbers with decimal points | y = 3.1415926                     |
| str            | Strings (sequences of characters)          | name = "Teemo"                |
| bool           | Boolean values (True or False)             | flag = True            |
| list           | Ordered, mutable collection of elements    | numbers = [1, 2, 3]          |
| tuple          | Ordered, immutable collection of elements  | coordinates = (10, 20)       |
| set            | Unordered, mutable collection of unique elements | unique_numbers = {1, 2, 3} |
| dict           | Collection of key-value pairs              | person = {'name': 'Alice', 'age': 30} |
| NoneType       | Represents the absence of a value          | no_value = None              |



## Basic Python syntax
### Variables

- left is variable name, right is value.

```{python}
#| echo: true

a = 1
b = 3.1
c = "Teemo"

# or you can assign variables just like follow:

a,b,c = 1,3.1,"Teemo"
print(a)
print(b)
print(c)
```

- Always give a value when you start to create a variable

```{python}
#| error: true
#| echo: true

d
print(d)
```

```{python}
str(1)+'1'
```

## Basic Python syntax 
### Variables

- It is possible for converting data of one type to another.
    - Implicit Conversion - automatic type conversion
    - Explicit Conversion - manual type conversion
    
For example:

```{python}
#| error: true
#| echo: true


# Implicit Conversion
a = 1
print(f"a is {type(a)}")

b = 1.0
print(f"b is {type(b)}")

c = a+b
print(f"c is {type(c)}")
```

## Basic Python syntax
### Variables

- It is possible for converting data of one type to another.
    - Implicit Conversion - automatic type conversion
    - Explicit Conversion - manual type conversion
    
For example:

```{python}
#| error: true
#| echo: true

# Explicit Conversion
a = 1
print(f"a is {type(a)}")

b = "python"
print(f"b is {type(b)}")

c = a+b
print(f"c is {type(c)}")
```
   
```{python}
#| error: true
#| echo: true

c = str(a) + b 
print(f"{c} is {type(c)}")
```

## Basic Python syntax
### Variables ---- *list*

- Elements can be mixed with different types
```python
list1 = [1, "2", True, 4]
```
- Element can be selected by position index (from 0)

```{python}
#|echo: true


list1 = [1, "2", True, 4]
print(list1[1])
```
## Basic Python syntax {.smaller}
### Variables ---- *list*

<br/>

| Method                     | Description                                             |
| -------------------------- | ------------------------------------------------------- |
| `append(item)`             | Add an element `item` to the end of the list.          |
| `extend(iterable)`         | Extend the list by appending elements from `iterable`. |
| `insert(index, item)`      | Insert `item` at the specified `index`.                |
| `remove(item)`             | Remove the first occurrence of `item` from the list.   |
| `pop(index=-1)`            | Remove and return the element at `index`.              |
| `clear()`                  | Remove all elements from the list.                     |
| `index(item, start, end)`  | Return the index of the first occurrence of `item`.    |
| `count(item)`              | Return the number of occurrences of `item`.            |
| `sort(key, reverse)`       | Sort the list in ascending or descending order.        |
| `reverse()`                | Reverse the order of elements in the list.             |
| `copy()`                   | Create a shallow copy of the list.                     |



## Basic Python syntax
### Variables ---- *dict*

- Dictionaries are used to store data values in key:value pairs.
    - ordered
    - changeable
    - not allow duplicates

```python
phone = {
  "brand": "Nokia",
  "model": "N95",
  "year": 2006
}
```

## Basic Python syntax
### Variables ---- *dict*

To get keys or values of a dict:

- directly call the key

```{python}
#| echo: true


phone = {
  "brand": "Nokia",
  "model": "N95",
  "year": 2006
}

print(phone['model'])
#or
print(phone.get('model'))

```

```{python}
#| echo: true

#get values
print(phone.values())
#get keys
print(phone.keys())
# or both
print(phone.items())
```



## Basic Python syntax
### Basic arithmetic operations

<br/>

| Operation     | Operator | Example           | Result      |
|---------------|----------|-------------------|-------------|
| Addition      | +        | 5 + 3             | 8           |
| Subtraction   | -        | 7 - 2             | 5           |
| Multiplication| *        | 4 * 6             | 24          |
| Division      | /        | 10 / 2            | 5.0         |
| Floor Division| //       | 10 // 3           | 3           |
| Exponentiation| **       | 2 ** 3            | 8           |
| Modulus       | %        | 10 % 3            | 1           |



## Control Flow Statements {.smaller}
### Conditional statements

<br/>

| Condition             | Mathematical Expression  | Description                                      |
|-----------------------|-------------------------|--------------------------------------------------|
| Equal                 | a == b                  | True if a is equal to b; otherwise, False.       |
| Not Equal             | a != b                  | True if a is not equal to b; otherwise, False.   |
| Greater Than          | a > b                   | True if a is greater than b; otherwise, False.   |
| Less Than             | a < b                   | True if a is less than b; otherwise, False.      |
| Greater Than or Equal | a >= b                  | True if a is greater than or equal to b; otherwise, False. |
| Less Than or Equal    | a <= b                  | True if a is less than or equal to b; otherwise, False.    |

<br/>
<br/>

And usually together with `if` statement
```{python}
#| echo: true


a = 1
b = 2
if b > a:
  print("b is greater than a")
```



## Control Flow Statements 
### Conditional statements

If we want to try multi-conditions, `elis` and `else` keywords are needed:

```{python}
#| echo: true

a = 33
b = 33
if b > a:
    print("b is greater than a")
elif a == b:
    print("a and b are equal")
else:
    print("b is less than a")
 
```


## Control Flow Statements
### Loops

- `for` loop
- `while` loop
- Both `for` and `while` loops can be liked to:
    - `break` statement
        - stop the loop before it has looped through all the items
    - `continue` statement
        - stop current iteration, move to next
    - `else` statement
        - to specifies codes to be executed when loop is ended

## Control Flow Statements
### `for` loop


```{python}
#|echo: true

numbers = [1,2,3,4]
for x in numbers:
    if x == 1:
        continue
    if x == 3:
        continue
    print(x)
else:
    print("loos is over")
```
with `break`:
```{python}
#|echo: true

numbers = [1,2,3,4]
for x in numbers:
    if x == 2:
      break
    print(x)
```

## Control Flow Statements
### `while` loop

- Endless execute a set of statements as long as a condition is true.

```python
i = 1
while i < 6:
  print(i)
  i += 1
```
- can also work with `break` and `continue`

```{python}
#| echo: true

# here 5 is omitted
i = 0
while i < 6:
    i = i + 1
    if i == 3:
        continue
    if i == 4:
        break
    print(i)
```

## Function
### Define and call function

- The keyword `def` is used to define function

```python
def say_hello():
    print("hello world!!")
```
- Use the function name to call

```{python}
#| echo: true

# define a function
def say_hello():
    print("hello world!!")

# call the function
say_hello()
```

- pass parameter

```{python}
#| echo: true


def say_hello(name):
    print(name+" hello world!!")
    
say_hello("Teemo")
```

## Usefull modeles
### Numpy 



![](Numpy_logo.png){.absolute top=20 right=15 width="100"}




